from sys import stdin as s

s = open("input.txt", "rt")
""" 
문제

N(2 ≤ N ≤ 10,000)개의 돌들이 같은 간격으로 놓여 있다. 
편의상 순서대로 1, 2, …, N번 돌이라고 부르자. 
당신은 현재 1번 돌 위에 있는데, 이 돌들 사이에서 점프를 하면서 N번째 돌로 이동을 하려 한다. 
이때 다음 조건들이 만족되어야 한다.

이동은 앞으로만 할 수 있다. 즉, 돌 번호가 증가하는 순서대로만 할 수 있다.
제일 처음에 점프를 할 때에는 한 칸밖에 점프하지 못한다. 
즉, 1번 돌에서 2번 돌이 있는 곳으로 점프할 수 있다. 
그 다음부터는 가속/감속 점프를 할 수 있는데, 
이전에 x칸 점프를 했다면, 다음번에는 속도를 줄여 x-1칸 점프하거나, x칸 점프하거나, 
속도를 붙여 x+1칸 점프를 할 수 있다. 물론 점프를 할 때에는 한 칸 이상씩 해야 한다.
각 돌들은 각기 그 크기가 다르고, 
그 중 몇 개의 돌은 크기가 너무 작기 때문에 당신은 그러한 돌에는 올라갈 수 없다.
위와 같은 조건들을 만족하면서 1번 돌에서 N번 돌까지 점프를 해 갈 때, 
필요한 최소의 점프 횟수를 구하는 프로그램을 작성하시오.

첫째 줄에 두 정수 N, M(0 ≤ M ≤ N-2)이 주어진다. 
M은 크기가 맞지 않는, 즉 크기가 작은 돌의 개수이다. 
다음 M개의 줄에는 크기가 작은 돌들의 번호가 주어진다. 
1번 돌과 N번 돌은 충분히 크기가 크다고 가정한다.

첫째 줄에 필요한 최소의 점프 횟수를 출력한다. 
만약 N번 돌까지 점프해갈 수 없는 경우에는 -1을 출력한다.
"""


if __name__ == "__main__":
    n, m = list(map(int, s.readline().rstrip().split()))
    dp = [[float('inf')] * (int((2 * n) ** 0.5) + 2) for _ in range(n + 1)]
    # dp[i][v] = i번째 돌에 v의 속도로 들어왔을 때 최소 점프 횟수
    dp[1][0] = 0

    stones = set()

    for _ in range(m):
        stones.add(int(s.readline().rstrip()))
    
    for i in range(2, n + 1):

        # 만약 i번째 돌이 작은 돌이라면 다음 루프로
        if i in stones:
            continue

        # 작은돌이 아니라면 dp[i][j] =  i번째 돌에 j의 속도로 들어왔을 경우 최소 점프 횟수를 갱신해준다.
        for j in range(1, int((2 * i) ** 0.5) + 1):
            # i - j번째 돌에서 j로 뛰는 경우는 다음 3가지이다.
            # 1) dp[i-j][j-1] 에서 가속
            # 2) dp[i-j][j] 로 유지
            # 3) dp[i-j][j+1] 에서 감속
            # 위의 세 경우의 최솟값에 i-j 에서 j로 뛰는 + 1을 한 값이 dp[i][j]가 된다.
            dp[i][j] = min(dp[i - j][j - 1], dp[i - j][j], dp[i - j][j + 1]) + 1


    for i in range(n+1):
        for j in range(int((2 * i) ** 0.5) + 1):
            print(dp[i][j], end=" ")
        print()

    # if min(dp[n]) == float('inf'):
    #     print(-1)
    # else:
    #     print(min(dp[n])) 
            
        

